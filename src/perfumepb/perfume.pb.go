// Code generated by protoc-gen-gogo.
// source: perfume.proto
// DO NOT EDIT!

/*
	Package perfumepb is a generated protocol buffer package.

	It is generated from these files:
		perfume.proto

	It has these top-level messages:
		Entry
		GetEntryListReq
		GetEntryReq
		EntryListResponse
*/
package perfumepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Entry struct {
	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	CreatedAt int64    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at,omitempty"`
	Link      string   `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Title     string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Labels    []string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptorPerfume, []int{0} }

func (m *Entry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Entry) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Entry) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Entry) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Entry) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type GetEntryListReq struct {
}

func (m *GetEntryListReq) Reset()                    { *m = GetEntryListReq{} }
func (m *GetEntryListReq) String() string            { return proto.CompactTextString(m) }
func (*GetEntryListReq) ProtoMessage()               {}
func (*GetEntryListReq) Descriptor() ([]byte, []int) { return fileDescriptorPerfume, []int{1} }

type GetEntryReq struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetEntryReq) Reset()                    { *m = GetEntryReq{} }
func (m *GetEntryReq) String() string            { return proto.CompactTextString(m) }
func (*GetEntryReq) ProtoMessage()               {}
func (*GetEntryReq) Descriptor() ([]byte, []int) { return fileDescriptorPerfume, []int{2} }

func (m *GetEntryReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EntryListResponse struct {
	Entries []*Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *EntryListResponse) Reset()                    { *m = EntryListResponse{} }
func (m *EntryListResponse) String() string            { return proto.CompactTextString(m) }
func (*EntryListResponse) ProtoMessage()               {}
func (*EntryListResponse) Descriptor() ([]byte, []int) { return fileDescriptorPerfume, []int{3} }

func (m *EntryListResponse) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*Entry)(nil), "perfumepb.Entry")
	proto.RegisterType((*GetEntryListReq)(nil), "perfumepb.GetEntryListReq")
	proto.RegisterType((*GetEntryReq)(nil), "perfumepb.GetEntryReq")
	proto.RegisterType((*EntryListResponse)(nil), "perfumepb.EntryListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PerfumeService service

type PerfumeServiceClient interface {
	CreateEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error)
	DeleteEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error)
	UpdateEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error)
	GetEntryList(ctx context.Context, in *GetEntryListReq, opts ...grpc.CallOption) (*EntryListResponse, error)
	GetEntry(ctx context.Context, in *GetEntryReq, opts ...grpc.CallOption) (*Entry, error)
}

type perfumeServiceClient struct {
	cc *grpc.ClientConn
}

func NewPerfumeServiceClient(cc *grpc.ClientConn) PerfumeServiceClient {
	return &perfumeServiceClient{cc}
}

func (c *perfumeServiceClient) CreateEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/perfumepb.PerfumeService/CreateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfumeServiceClient) DeleteEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/perfumepb.PerfumeService/DeleteEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfumeServiceClient) UpdateEntry(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/perfumepb.PerfumeService/UpdateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfumeServiceClient) GetEntryList(ctx context.Context, in *GetEntryListReq, opts ...grpc.CallOption) (*EntryListResponse, error) {
	out := new(EntryListResponse)
	err := grpc.Invoke(ctx, "/perfumepb.PerfumeService/GetEntryList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfumeServiceClient) GetEntry(ctx context.Context, in *GetEntryReq, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := grpc.Invoke(ctx, "/perfumepb.PerfumeService/GetEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PerfumeService service

type PerfumeServiceServer interface {
	CreateEntry(context.Context, *Entry) (*Entry, error)
	DeleteEntry(context.Context, *Entry) (*Entry, error)
	UpdateEntry(context.Context, *Entry) (*Entry, error)
	GetEntryList(context.Context, *GetEntryListReq) (*EntryListResponse, error)
	GetEntry(context.Context, *GetEntryReq) (*Entry, error)
}

func RegisterPerfumeServiceServer(s *grpc.Server, srv PerfumeServiceServer) {
	s.RegisterService(&_PerfumeService_serviceDesc, srv)
}

func _PerfumeService_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfumeServiceServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfumepb.PerfumeService/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfumeServiceServer).CreateEntry(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfumeService_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfumeServiceServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfumepb.PerfumeService/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfumeServiceServer).DeleteEntry(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfumeService_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfumeServiceServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfumepb.PerfumeService/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfumeServiceServer).UpdateEntry(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfumeService_GetEntryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfumeServiceServer).GetEntryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfumepb.PerfumeService/GetEntryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfumeServiceServer).GetEntryList(ctx, req.(*GetEntryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfumeService_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfumeServiceServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perfumepb.PerfumeService/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfumeServiceServer).GetEntry(ctx, req.(*GetEntryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PerfumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "perfumepb.PerfumeService",
	HandlerType: (*PerfumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntry",
			Handler:    _PerfumeService_CreateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _PerfumeService_DeleteEntry_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _PerfumeService_UpdateEntry_Handler,
		},
		{
			MethodName: "GetEntryList",
			Handler:    _PerfumeService_GetEntryList_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _PerfumeService_GetEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "perfume.proto",
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPerfume(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPerfume(dAtA, i, uint64(m.CreatedAt))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPerfume(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPerfume(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetEntryListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEntryListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetEntryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEntryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPerfume(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *EntryListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPerfume(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Perfume(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Perfume(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPerfume(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Entry) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPerfume(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovPerfume(uint64(m.CreatedAt))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovPerfume(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPerfume(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovPerfume(uint64(l))
		}
	}
	return n
}

func (m *GetEntryListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetEntryReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPerfume(uint64(l))
	}
	return n
}

func (m *EntryListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovPerfume(uint64(l))
		}
	}
	return n
}

func sovPerfume(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPerfume(x uint64) (n int) {
	return sovPerfume(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerfume
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerfume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerfume
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerfume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerfume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerfume
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerfume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerfume
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerfume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerfume
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerfume(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPerfume
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEntryListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerfume
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEntryListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEntryListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPerfume(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPerfume
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEntryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerfume
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEntryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEntryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerfume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerfume
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerfume(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPerfume
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerfume
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerfume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPerfume
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerfume(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPerfume
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPerfume(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPerfume
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPerfume
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPerfume
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPerfume
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPerfume
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPerfume(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPerfume = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPerfume   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("perfume.proto", fileDescriptorPerfume) }

var fileDescriptorPerfume = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0xae, 0xd2, 0x40,
	0x14, 0x86, 0x99, 0xf6, 0x72, 0xb5, 0x07, 0x45, 0x98, 0x10, 0xd2, 0x54, 0x2d, 0xcd, 0xac, 0x1a,
	0xa3, 0x25, 0x81, 0xc4, 0x85, 0x0b, 0x8d, 0xa8, 0x31, 0x31, 0x2e, 0x4c, 0x8d, 0x6b, 0x42, 0xe9,
	0x01, 0x27, 0xb6, 0x9d, 0xd2, 0x0e, 0x26, 0xbc, 0x89, 0xef, 0xc1, 0x4b, 0xb8, 0xf4, 0x09, 0x88,
	0xc1, 0x37, 0xe0, 0x09, 0x4c, 0xa7, 0x70, 0x69, 0x80, 0x0d, 0xbb, 0xf9, 0xcf, 0xfc, 0xdf, 0x99,
	0x73, 0xfe, 0x0c, 0x3c, 0x4c, 0x31, 0x9b, 0x2d, 0x63, 0xf4, 0xd2, 0x4c, 0x48, 0x41, 0x8d, 0xbd,
	0x4c, 0x03, 0xeb, 0xc5, 0x9c, 0xcb, 0xef, 0xcb, 0xc0, 0x9b, 0x8a, 0xb8, 0x3f, 0x17, 0x73, 0xd1,
	0x57, 0x8e, 0x60, 0x39, 0x53, 0x4a, 0x09, 0x75, 0x2a, 0x49, 0xb6, 0x26, 0x50, 0xff, 0x90, 0xc8,
	0x6c, 0x45, 0x5d, 0xd0, 0x78, 0x68, 0x12, 0x87, 0xb8, 0xc6, 0xc8, 0xdc, 0x6d, 0x7a, 0x9d, 0x20,
	0x17, 0xc9, 0x2b, 0x36, 0xe6, 0xe1, 0x73, 0x11, 0x73, 0x89, 0x71, 0x2a, 0x57, 0xcc, 0xd7, 0x78,
	0x48, 0x5f, 0x03, 0x4c, 0x33, 0x9c, 0x48, 0x0c, 0xc7, 0x13, 0x69, 0x6a, 0x0e, 0x71, 0xf5, 0x51,
	0x6f, 0xb7, 0xe9, 0x3d, 0x2e, 0x89, 0xe3, 0x5d, 0x15, 0x34, 0xf6, 0xe5, 0xb7, 0x92, 0x52, 0xb8,
	0x89, 0x78, 0xf2, 0xc3, 0xd4, 0x8b, 0xb7, 0x7c, 0x75, 0xa6, 0x1d, 0xa8, 0x4b, 0x2e, 0x23, 0x34,
	0x6f, 0x54, 0xb1, 0x14, 0xb4, 0x0b, 0xb7, 0xd1, 0x24, 0xc0, 0x28, 0x37, 0xeb, 0x8e, 0xee, 0x1a,
	0xfe, 0x5e, 0xb1, 0x36, 0x3c, 0xfa, 0x88, 0x52, 0xcd, 0xfd, 0x99, 0xe7, 0xd2, 0xc7, 0x05, 0x7b,
	0x0a, 0x8d, 0x43, 0xc9, 0xc7, 0x05, 0x6d, 0x1e, 0xb7, 0x29, 0x66, 0x66, 0x6f, 0xa0, 0x5d, 0xb1,
	0xe7, 0xa9, 0x48, 0x72, 0xa4, 0xcf, 0xe0, 0x1e, 0x26, 0x32, 0xe3, 0x98, 0x9b, 0xc4, 0xd1, 0xdd,
	0xc6, 0xa0, 0xe5, 0xdd, 0x05, 0xe9, 0x95, 0xad, 0x0e, 0x86, 0xc1, 0x5a, 0x83, 0xe6, 0x97, 0xf2,
	0xf2, 0x2b, 0x66, 0x3f, 0xf9, 0x14, 0xe9, 0x10, 0x1a, 0xef, 0xd4, 0x52, 0x65, 0x80, 0x67, 0xb0,
	0x75, 0x56, 0x61, 0xb5, 0x02, 0x7a, 0x8f, 0x11, 0x5e, 0x0d, 0x7d, 0x4b, 0xc3, 0x2b, 0x5f, 0xfa,
	0x04, 0x0f, 0xaa, 0x21, 0x51, 0xab, 0xe2, 0x39, 0x49, 0xcf, 0x7a, 0x72, 0xca, 0x57, 0x73, 0x62,
	0x35, 0xfa, 0x12, 0xee, 0x1f, 0x10, 0xda, 0xbd, 0xd0, 0xa7, 0xe8, 0x71, 0x61, 0x86, 0x51, 0xeb,
	0xf7, 0xd6, 0x26, 0x7f, 0xb6, 0x36, 0xf9, 0xbb, 0xb5, 0xc9, 0xaf, 0x7f, 0x76, 0x2d, 0xb8, 0x55,
	0xff, 0x6e, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xcf, 0x40, 0x59, 0xc2, 0x02, 0x00, 0x00,
}
